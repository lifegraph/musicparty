{
  "name": "libspotify",
  "description": "Node bindings to the libspotify C library",
  "author": {
    "name": "Florent Jaby",
    "email": "florent.jaby@gmail.com"
  },
  "keywords": [
    "spotify",
    "libspotify",
    "bindings",
    "play",
    "player",
    "music"
  ],
  "version": "0.1.0",
  "maintainers": [
    {
      "name": "Florent Jaby",
      "email": "florent.jaby@gmail.com"
    }
  ],
  "homepage": "http://projects.flo.by/node-libspotify/",
  "bugs": {
    "url": "https://github.com/floby/node-libspotify/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Floby/node-libspotify.git"
  },
  "engines": {
    "node": "~0.8.0"
  },
  "dependencies": {
    "bindings": "~1.0.0",
    "i": "~0.3",
    "format": "0.1",
    "backoff": "~1.2"
  },
  "devDependencies": {
    "nodeunit": "~0.7",
    "trycatch": "*",
    "colors": "*"
  },
  "scripts": {
    "install": "node-gyp configure build",
    "pretest": "rm -rf /tmp/node-libspotify 2>/dev/null ; node-gyp clean >/dev/null && node-gyp configure --debug  >/dev/null && node-gyp build >/dev/null",
    "test": "nodeunit test/test-*"
  },
  "main": "lib/libspotify.js",
  "readme": "node-libspotify\n===============\n\nNode bindings for the libspotify C library\n\n_This is still very alpha, but you can already play around I suppose_\n\nInstall & test\n--------------\n\nPlease note that you must have the libspotify library installed on your system\nyou can get it from [here](https://developer.spotify.com/technologies/libspotify/).\n\nYou must provide your own spotify application key, because I'm not giving mine away :]\nYou also must provide valid credentials for a spotify account.\n\nOnce you cloned the repository\nrun `npm install` then test the module with `npm test`\n\nMain objectives\n---------------\n\nAs there are already a number of spotify bindings or modules for the REST API, the main goal\nof this module is not to give access to the artist and tracks catalog. It's main purpose is\nto allow for playback of the tracks. The idea is to expose a `Player` object in which the user\ncan load tracks, play them, and get decompressed audio data from it (as provided by the libspotify C library).\n\nWhat the user can do with the audio stream is up to him/her. As it is raw PCM data, it is easy to pipe to\nsome kind of encoder (like gstreamer) in order to broadcast music or stream it to a web user (as long as it complies\nwith the Spotify terms of service ;).\n\nThe user can also choose to play the song locally with a node module like [node-portaudio](https://github.com/joeferner/node-portaudio)\nor pipe the audio data to another process like [play](http://linux.about.com/library/cmd/blcmdl1_play.htm)\n\n\nThe main goal is now achieved. Audio data is exposed as the Player object which behaves like a readable stream\n\nSnippet\n-------\n\nHere is a code snippet of how to play a track from spotify\n\n```js\n\nvar sp = require('../lib/libspotify');\nvar cred = require('../spotify_key/passwd');\nvar fs = require('fs');\nvar spawn = require('child_process').spawn;\n\nvar f = fs.createWriteStream('/tmp/bidule.raw');\n\nvar session = new sp.Session({\n    applicationKey: __dirname + '/../spotify_key/spotify_appkey.key'\n});\nsession.login(cred.login, cred.password);\nsession.once('login', function(err) {\n    if(err) this.emit('error', err);\n\n    var search = new sp.Search('artist:\"rick astley\" track:\"never gonna give you up\"');\n    search.trackCount = 1; // we're only interested in the first result;\n    search.execute();\n    search.once('ready', function() {\n        if(!search.tracks.length) {\n            console.error('there is no track to play :[');\n            session.logout();\n        }\n\n        var track = search.tracks[0];\n        var player = session.getPlayer();\n        player.load(track);\n        player.play();\n\n        // linux\n        var play = spawn('aplay', ['-c', 2, '-f', 'S16_LE', '-r', '44100']);\n        // osx with `brew install sox`\n        var play = spawn('play', ['-r', 44100, '-b', 16, '-L', '-c', 2, '-e', 'signed-integer', '-t', 'raw', '-']);\n\n        player.pipe(play.stdin);\n\n        console.error('playing track. end in %s', track.humanDuration);\n        player.on('data', function(buffer) {\n            // buffer.length\n            // buffer.rate\n            // buffer.channels\n            // 16bit samples\n        });\n        player.once('track-end', function() {\n            console.error('track ended');\n            f.end();\n            player.stop();\n            session.close();\n        });\n    });\n});\n\n```\n\n\nTODO\n====\n\n* Bind to the rest of the API...\n",
  "_id": "libspotify@0.1.0",
  "_from": "libspotify"
}
