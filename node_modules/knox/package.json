{
  "name": "knox",
  "description": "Amazon S3 client",
  "keywords": [
    "aws",
    "amazon",
    "s3"
  ],
  "version": "0.5.3",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@learnboost.com"
  },
  "contributors": [
    {
      "name": "TJ Holowaychuk",
      "email": "tj@learnboost.com"
    },
    {
      "name": "Domenic Denicola",
      "email": "domenic@domenicdenicola.com"
    },
    {
      "name": "Oleg Slobodksoi",
      "email": "oleg008@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/LearnBoost/knox.git"
  },
  "bugs": {
    "url": "https://github.com/LearnBoost/knox/issues"
  },
  "dependencies": {
    "mime": "*",
    "xml2js": "0.2.x",
    "debug": "~0.7.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "directories": {
    "lib": "./lib"
  },
  "readme": "# knox\n\nNode Amazon S3 Client.\n\n## Features\n\n  - Familiar API (`client.get()`, `client.put()`, etc)\n  - Very Node-like low-level request capabilities via `http.Client`\n  - Higher-level API with `client.putStream()`, `client.getFile()`, etc.\n  - Copying and multi-file delete support\n  - Streaming file upload and direct stream-piping support\n\n## Examples\n\nThe following examples demonstrate some capabilities of knox and the S3 REST\nAPI. First things first, create an S3 client:\n\n```js\nvar client = knox.createClient({\n    key: '<api-key-here>'\n  , secret: '<secret-here>'\n  , bucket: 'learnboost'\n});\n```\n\nMore options are documented below for features like other endpoints or regions.\n\n### PUT\n\nIf you want to directly upload some strings to S3, you can use the `Client#put`\nmethod with a string or buffer, just like you would for any `http.Client`\nrequest. You pass in the filename as the first parameter, some headers for the\nsecond, and then listen for a `'response'` event on the request. Then send the\nrequest using `req.end()`. If we get a 200 response, great!\n\n```js\nvar object = { foo: \"bar\" };\nvar string = JSON.stringify(object);\nvar req = client.put('/test/obj.json', {\n    'Content-Length': string.length\n  , 'Content-Type': 'application/json'\n});\nreq.on('response', function(res){\n  if (200 == res.statusCode) {\n    console.log('saved to %s', req.url);\n  }\n});\nreq.end(string);\n```\n\nBy default the _x-amz-acl_ header is _private_. To alter this simply pass this header to the client request method.\n\n```js\nclient.put('/test/obj.json', { 'x-amz-acl': 'public-read' });\n```\n\nEach HTTP verb has an alternate method with the \"File\" suffix, for example\n`put()` also has a higher level method named `putFile()`, accepting a source\nfilename and performing the dirty work shown above for you. Here is an example\nusage:\n\n```js\nclient.putFile('my.json', '/user.json', function(err, res){\n  // Logic\n});\n```\n\nAnother alternative is to stream via `Client#putStream()`, for example:\n\n```js\nhttp.get('http://google.com/doodle.png', function(res){\n  var headers = {\n      'Content-Length': res.headers['content-length']\n    , 'Content-Type': res.headers['content-type']\n  };\n  client.putStream(res, '/doodle.png', headers, function(err, res){\n    // Logic\n  });\n});\n```\n\nAnd if you want a nice interface for putting a buffer or a string of data,\nuse `Client#putBuffer()`:\n\n```js\nvar buffer = new Buffer('a string of data');\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nclient.putBuffer(buffer, '/string.txt', headers, function(err, res){\n  // Logic\n});\n```\n\nNote that both `putFile` and `putStream` will stream to S3 instead of reading\ninto memory, which is great. And they return objects that emit `'progress'`\nevents too, so you can monitor how the streaming goes! The progress events have\nfields `written`, `total`, and `percent`.\n\n### GET\n\nBelow is an example __GET__ request on the file we just shoved at S3. It simply\noutputs the response status code, headers, and body.\n\n```js\nclient.get('/test/Readme.md').on('response', function(res){\n  console.log(res.statusCode);\n  console.log(res.headers);\n  res.setEncoding('utf8');\n  res.on('data', function(chunk){\n    console.log(chunk);\n  });\n}).end();\n```\n\nThere is also `Client#getFile()` which uses a callback pattern instead of giving\nyou the raw request:\n\n```js\nclient.getFile('/test/Readme.md', function(err, res){\n  // Logic\n});\n```\n\n### DELETE\n\nDelete our file:\n\n```js\nclient.del('/test/Readme.md').on('response', function(res){\n  console.log(res.statusCode);\n  console.log(res.headers);\n}).end();\n```\n\nLikewise we also have `Client#deleteFile()` as a more concise (yet less\nflexible) solution:\n\n```js\nclient.deleteFile('/test/Readme.md', function(err, res){\n  // Logic\n});\n```\n\n### HEAD\n\nAs you might expect we have `Client#head` and `Client#headFile`, following the\nsame pattern as above.\n\n### Advanced Operations\n\nKnox supports a few advanced operations. Like [copying files][copy]:\n\n```js\nclient.copy('/test/Readme.md', '/test/Readme.markdown').on('response', function(res){\n  console.log(res.statusCode);\n  console.log(res.headers);\n}).end();\n\n// or\n\nclient.copyFile('/test/Readme.md', '/test/Readme.markdown', function(err, res){\n  // ...\n});\n```\n\neven between buckets:\n\n\n```js\nclient.copyTo('/test/Readme.md', 'mirror-bucket', 'test/Readme.md').on('response', function(res){\n  // ...\n}).end();\n\n// or\n\nclient.copyFileTo('/test/Readme.md', 'mirror-bucket', 'test/Readme.md', function (err, res){\n  // ...\n});\n\n```\n\nor [deleting multiple files at once][multi-delete]:\n\n```js\nclient.deleteMultiple(['/test/Readme.md', '/test/Readme.markdown'], function(err, res){\n  // ...\n});\n```\n\nor [listing all the files in your bucket][list]:\n\n```js\nclient.list({ prefix: 'my-prefix' }, function(err, data){\n  /* `data` will look roughly like:\n\n  {\n    Prefix: 'my-prefix',\n    IsTruncated: true,\n    MaxKeys: 1000,\n    Contents: [\n      {\n        Key: 'whatever'\n        LastModified: new Date(2012, 11, 25, 0, 0, 0),\n        ETag: 'whatever',\n        Size: 123,\n        Owner: 'you',\n        StorageClass: 'whatever'\n      },\n      â‹®\n    ]\n  }\n\n  */\n});\n```\n\nAnd you can always issue ad-hoc requests, e.g. the following to\n[get an object's ACL][acl]:\n\n```js\nclient.request('GET', '/test/Readme.md?acl').on('response', function(res){\n  // Read and parse the XML response.\n  // Everyone loves XML parsing.\n}).end();\n```\n\nFinally, you can construct HTTP or HTTPS URLs for a file like so:\n\n```js\nvar readmeUrl = client.http('/test/Readme.md');\nvar userDataUrl = client.https('/user.json');\n```\n\n[copy]: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectCOPY.html\n[multi-delete]: http://docs.aws.amazon.com/AmazonS3/latest/API/multiobjectdeleteapi.html\n[list]: http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html\n[acl]: http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETacl.html\n\n## Client Creation Options\n\nBesides the required `key`, `secret`, and `bucket` options, you can supply any\nof the following:\n\n### `endpoint`\n\nBy default knox will send all requests to the global endpoint\n(bucket.s3.amazonaws.com). This works regardless of the region where the bucket\nis. But if you want to manually set the endpoint (for performance reasons) you\ncan do it with the `endpoint` option.\n\n### `region`\n\nFor your convenience when using buckets not in the US Standard region, you can\nspecify the `region` option. When you do so, the `endpoint` hostname is\nautomatically assembled.\n\nAs of this writing, valid values for the `region` option are:\n\n* US Standard (default): `us-standard`\n* US West (Oregon): `us-west-2`\n* US West (Northern California): `us-west-1`\n* EU (Ireland): `eu-west-1`\n* Asia Pacific (Singapore): `ap-southeast-1`\n* Asia Pacific (Tokyo): `ap-northeast-1`\n* South America (Sao Paulo): `sa-east-1`\n\nIf new regions are added later, their subdomain names will also work when passed\nas the `region` option. See the [AWS endpoint documentation][endpoint-docs] for\nthe latest list.\n\n**Convenience APIs such as `putFile` and `putStream` currently do not work as\nexpected with buckets in regions other than US Standard without explicitly\nspecify the region option.** This will eventually be addressed by resolving\n[issue #66][]; however, for performance reasons, it is always best to specify\nthe region option anyway.\n\n[endpoint-docs]: http://docs.amazonwebservices.com/general/latest/gr/rande.html#s3_region\n[issue #66]: https://github.com/LearnBoost/knox/issues/66\n\n### `secure` and `port`\n\nBy default, knox uses HTTPS to connect to S3 on port 443. You can override\neither of these with the `secure` and `port` options. Note that if you specify a\ncustom `port` option, the default for `secure` switches to `false`, although\nyou can override it manually if you want to run HTTPS against a specific port.\n\n### `token`\n\nIf you are using the [AWS Security Token Service][sts] APIs, you can construct\nthe client with a `token` parameter containing the temporary security\ncredentials token. This simply sets the _x-amz-security-token_ header on every\nrequest made by the client.\n\n[sts]: http://docs.amazonwebservices.com/STS/latest/UsingSTS/Welcome.html\n\n### `agent`\n\nIf you want to use a custom [HTTP agent][], you can specify this with the\n`agent` option.\n\n[HTTP agent]: http://nodejs.org/docs/latest/api/http.html#http_class_http_agent\n\n\n## Beyond Knox\n\n### Multipart Upload\n\nS3's [multipart upload][] is their [rather-complicated][] way of uploading large\nfiles. In particular, it is the only way of streaming files without knowing\ntheir Content-Length ahead of time.\n\nAdding the complexity of multipart upload directly to knox is not a great idea.\nFor example, it requires buffering at least 5 MiB of data at a time in memory,\nwhich you want to avoid if possible. Fortunately, [@nathanoehlman][] has created\nthe excellent [knox-mpu][] package to let you use multipart upload with knox if\nyou need it!\n\n[multipart upload]: aws.typepad.com/aws/2010/11/amazon-s3-multipart-upload.html\n[rather-complicated]: http://stackoverflow.com/q/8653146/3191\n[@nathanoehlman]: https://github.com/nathanoehlman\n[knox-mpu]: https://npmjs.org/package/knox-mpu\n\n### Easy Download/Upload\n\n[@superjoe30][] has created a nice library, called simply [s3][], that makes it\nvery easy to upload local files directly to S3, and download them back to your\nfilesystem. For simple cases this is often exactly what you want!\n\n[@superjoe30]: https://github.com/superjoe30\n[s3]: https://npmjs.org/package/s3\n\n\n## Running Tests\n\nTo run the test suite you must first have an S3 account. Then create a file named\n_./test/auth.json_, which contains your credentials as JSON, for example:\n\n```json\n{\n  \"key\": \"<api-key-here>\",\n  \"secret\": \"<secret-here>\",\n  \"bucket\": \"<your-bucket-name>\",\n  \"bucketUsWest2\": \"<bucket-in-us-west-2-region-here>\"\n}\n```\n\nThen install the dev dependencies and execute the test suite:\n\n```\n$ npm install\n$ npm test\n```\n",
  "_id": "knox@0.5.3",
  "dist": {
    "shasum": "e022b9149080127bb7233a65dcdcb2c0c2e47a77"
  },
  "_from": "knox@latest"
}
